import os
import traceback

import werkzeug
from connexion import ProblemException, FlaskApi
from connexion.lifecycle import ConnexionResponse

from rms.common.exceptions import ServiceException
from rms.swagger_server.models.api_status import ApiStatus
from rms.swagger_server.models.protobuf_any import ProtobufAny


class ErrorHanlder:
    @staticmethod
    def problem(status, title, detail=None, type=None, instance=None, headers=None, ext=None):
        """
        Returns a `Problem Details <https://tools.ietf.org/html/draft-ietf-appsawg-http-problem-00>`_ error response.


        :param status: The HTTP status code generated by the origin server for this occurrence of the problem.
        :type status: int
        :param title: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to
                      occurrence of the problem, except for purposes of localisation.
        :type title: str
        :param detail: An human readable explanation specific to this occurrence of the problem.
        :type detail: str
        :param type: An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable
                     documentation for the problem type (e.g., using HTML).  When this member is not present its value is
                     assumed to be "about:blank".
        :type: type: str
        :param instance: An absolute URI that identifies the specific occurrence of the problem.  It may or may not yield
                         further information if dereferenced.
        :type instance: str
        :param headers: HTTP headers to include in the response
        :type headers: dict | None
        :param ext: Extension members to include in the body
        :type ext: dict | None
        :return: error response
        :rtype: ConnexionResponse
        """
        if not type:
            type = 'about:blank'

        problem_response = ApiStatus(code=status, msg=title, data=[])
        if detail:
            problem_response.data.append(ProtobufAny(type_url='detail', value=detail))

        if instance:
            problem_response.data.append(ProtobufAny(type_url='instance', value=instance))

        if ext:
            problem_response.data.append(ProtobufAny(type_url='ext', value=ext))

        mimetype = content_type = 'application/problem+json'
        # return 200 http status code
        # http://wiki.envisioncn.com/pages/viewpage.action?pageId=13057195
        return ConnexionResponse(200, mimetype, content_type,
                                 body=problem_response,
                                 headers=headers)

    @staticmethod
    def set_errors_handlers(app):
        for error_code in werkzeug.exceptions.default_exceptions:
            app.add_error_handler(error_code, ErrorHanlder.common_error_handler)

        app.add_error_handler(ProblemException, ErrorHanlder.common_error_handler)
        app.add_error_handler(Exception, ErrorHanlder.common_error_handler)

    @staticmethod
    def common_error_handler(exception):
        """
        :type exception: Exception
        """
        if isinstance(exception, ProblemException):
            # exception.title show message like 'Bad Request' which is not very helpful
            response = ErrorHanlder.problem(
                status=exception.status, title=exception.detail, detail=exception.detail,
                type=exception.type, instance=exception.instance, headers=exception.headers,
                ext=exception.ext)

        elif isinstance(exception, ServiceException):
            response = ErrorHanlder.problem(
                status=exception.error_code, title=exception.error_title, detail=exception.error_msg)
        else:
            if not isinstance(exception, werkzeug.exceptions.HTTPException):
                common_exception = werkzeug.exceptions.InternalServerError()
                if os.getenv('FLASK_CONFIG', 'development') == 'development':
                    raise exception
                response = ErrorHanlder.problem(title=common_exception.name, detail=common_exception.description,
                                                ext=str(exception),
                                                status=common_exception.code)
            else:
                response = ErrorHanlder.problem(title=exception.name, detail=exception.description,
                                                ext=str(exception),
                                                status=exception.code)
        traceback.print_exc()
        return FlaskApi.get_response(response)
