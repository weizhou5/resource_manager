# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rms.swagger_server.models.base_model_ import Model
from rms.swagger_server import util


class ConfigDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, options: List[str]=None, value: str=None):  # noqa: E501
        """ConfigDetail - a entity defined in Swagger

        :param options: The options of this ConfigDetail.  # noqa: E501
        :type options: List[str]
        :param value: The value of this ConfigDetail.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            'options': List[str],
            'value': str
        }

        self.attribute_map = {
            'options': 'options',
            'value': 'value'
        }

        self._options = options
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'ConfigDetail':
        """Returns the dict as a entity

        :param dikt: A dict.
        :type: dict
        :return: The configDetail of this ConfigDetail.  # noqa: E501
        :rtype: ConfigDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self) -> List[str]:
        """Gets the options of this ConfigDetail.


        :return: The options of this ConfigDetail.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options: List[str]):
        """Sets the options of this ConfigDetail.


        :param options: The options of this ConfigDetail.
        :type options: List[str]
        """

        self._options = options

    @property
    def value(self) -> str:
        """Gets the value of this ConfigDetail.

        defalut value  # noqa: E501

        :return: The value of this ConfigDetail.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ConfigDetail.

        defalut value  # noqa: E501

        :param value: The value of this ConfigDetail.
        :type value: str
        """

        self._value = value
